{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/DevPage.js","components/IndexPage.js","App.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","theme","root","color","palette","primary","main","DevPage","classes","useTheme","className","Box","p","borderRadius","fontWeight","mb","Alert","severity","IndexPage","appState","useSelector","title","message","Button","variant","size","App","exact","path","component","initState","landingTitle","store","createStore","action","type","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dad64085.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Box, makeStyles, useTheme } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport \"./IndexPage.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport const DevPage = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  console.log(theme);\n\n  return (\n    <div className=\"beautify\">\n      <Box className={classes.root} p={2} borderRadius={4} fontWeight=\"bolder\">\n        Dev And Testing\n      </Box>\n      <Box mb={1}>\n        <Alert severity=\"info\">This is an info alert — check it out!</Alert>\n      </Box>\n\n      <Box mb={1}>\n        <Alert severity=\"success\">\n          This is an success alert — check it out!\n        </Alert>\n      </Box>\n\n      <Box mb={1}>\n        <Alert severity=\"warning\">\n          This is an warning alert — check it out!\n        </Alert>\n      </Box>\n\n      <Box mb={1}>\n        <Alert severity=\"error\">This is an error alert — check it out!</Alert>\n      </Box>\n\n      <div>Github Profile</div>\n    </div>\n  );\n};\n","import { useSelector } from \"react-redux\";\nimport \"./IndexPage.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { Box } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nexport const IndexPage = () => {\n  const appState = useSelector((state) => state);\n\n  return (\n    <div className=\"beautify\">\n      <Box mb>\n        <Alert severity=\"info\">{appState.title}</Alert>\n      </Box>\n      <Box mb>\n        <Alert severity=\"success\">{appState.message}</Alert>\n      </Box>\n\n      <Button variant=\"outlined\" size=\"small\">\n        Check Out\n      </Button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { DevPage } from \"./components/DevPage\";\nimport { IndexPage } from \"./components/IndexPage\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={IndexPage} />\n      <Route exact path=\"/dev\" component={DevPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nconst initState = {\n  title: \"Welcome to My Profile, Santosh Mondal\",\n  message: \"Work in Progress...!\",\n  landingTitle: \"Landing page title\",\n};\n\nconst rootReducer = (state = initState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger, thunk))\n);\nexport { store };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"@fontsource/roboto\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}